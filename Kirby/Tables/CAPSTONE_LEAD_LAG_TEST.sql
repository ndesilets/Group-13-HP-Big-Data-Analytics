ALTER SESSION SET WORKAREA_SIZE_POLICY = AUTO;
ALTER SESSION SET WORKAREA_SIZE_POLICY = MANUAL;
ALTER SESSION SET SORT_AREA_SIZE = 2147483647;

DROP TABLE CAPSTONE_DEMO.LEAD_LAG_TEST_V1;
TRUNCATE TABLE CAPSTONE_DEMO.LEAD_LAG_TEST_V1;
CREATE TABLE CAPSTONE_DEMO.LEAD_LAG_TEST_V1

(
DEVICE_ID NUMBER,
DEVICE_LOCAL_TIME DATE,
LOCATION_KEY NUMBER,
SERIAL_NUMBER NUMBER
)

--PARTITION BY RANGE (DEVICE_ID)
--  INTERVAL (1)
--  (PARTITION "P0" VALUES LESS THAN (1) SEGMENT CREATION DEFERRED)
PCTFREE 0
NOLOGGING
NOCOMPRESS
PARALLEL (DEGREE DEFAULT);

BEGIN

--FOR A IN 11..26 LOOP
FOR A IN 11..26 LOOP --Device ID Loop
FOR B IN 31..46 LOOP --Location Loop
FOR C IN 1..365 LOOP --Day Loop

INSERT INTO CAPSTONE_DEMO.LEAD_LAG_TEST_V1

SELECT
  A AS DEVICE_ID,
  TO_DATE('20140101 00:00:00', 'yyyymmdd hh24:mi:ss') + (C - 1) + ROWNUM/24/60/60*10 - 1/24/60/60 AS DEVICE_LOCAL_TIME,
  B AS LOCATION_KEY,
  ORA_HASH(A || B || C || SYSTIMESTAMP) AS SERIAL_NUMBER
FROM DUAL
CONNECT BY LEVEL <= 8640; --One data point every 10 seconds

COMMIT;

END LOOP;
END LOOP;
END LOOP;
END;
/

BEGIN -- Gather Stats

DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => 'CAPSTONE_DEMO', TABNAME => 'LEAD_LAG_TEST_V1', GRANULARITY => 'ALL', ESTIMATE_PERCENT => DBMS_STATS.AUTO_SAMPLE_SIZE, DEGREE => 16, CASCADE => DBMS_STATS.AUTO_CASCADE);

END;
/

SELECT
  DEVICE_ID,
  LOCATION_KEY,
  TRUNC(DEVICE_LOCAL_TIME) AS CALENDAR_DT,
  MIN(DEVICE_LOCAL_TIME) AS MIN_TIME,
  MAX(DEVICE_LOCAL_TIME) AS MAX_TIME
FROM CAPSTONE_DEMO.LEAD_LAG_TEST_V1
GROUP BY
  DEVICE_ID,
  LOCATION_KEY,
  TRUNC(DEVICE_LOCAL_TIME)
ORDER BY
  DEVICE_ID,
  LOCATION_KEY,
  CALENDAR_DT;
  
SELECT
  SERIAL_NUMBER,
  COUNT(*)
FROM CAPSTONE_DEMO.LEAD_LAG_TEST_V1
GROUP BY
  SERIAL_NUMBER;
  
WITH LEAD_LAG AS

(
SELECT /*+ MONITOR PARALLEL(16) GATHER_PLAN_STATISTICS FIND_ME */
  A.DEVICE_ID,
  A.DEVICE_LOCAL_TIME,
  A.LOCATION_KEY,
  A.SERIAL_NUMBER,
  LEAD(SERIAL_NUMBER) OVER(PARTITION BY A.DEVICE_ID, A.LOCATION_KEY ORDER BY DEVICE_LOCAL_TIME) AS NEXT_SERIAL_NUMBER,
  LAG(SERIAL_NUMBER) OVER(PARTITION BY A.DEVICE_ID, A.LOCATION_KEY ORDER BY DEVICE_LOCAL_TIME) AS PREVIOUS_SERIAL_NUMBER
FROM CAPSTONE_DEMO.LEAD_LAG_TEST_V1 A
)

SELECT
  *
FROM LEAD_LAG
WHERE SERIAL_NUMBER <> NEXT_SERIAL_NUMBER
OR SERIAL_NUMBER <> PREVIOUS_SERIAL_NUMBER
OR PREVIOUS_SERIAL_NUMBER IS NULL
OR NEXT_SERIAL_NUMBER IS NULL
ORDER BY
  DEVICE_ID,
  LOCATION_KEY,
  DEVICE_LOCAL_TIME;
ALTER SESSION SET WORKAREA_SIZE_POLICY = MANUAL;
ALTER SESSION SET SORT_AREA_SIZE = 2147483647;

TRUNCATE TABLE CAPSTONE_DEMO.CAPSTONE_PARALLEL_TEST_V1;
DROP TABLE CAPSTONE_DEMO.CAPSTONE_PARALLEL_TEST_V1;
CREATE TABLE CAPSTONE_DEMO.CAPSTONE_PARALLEL_TEST_V1

(
DEVICE_ID NUMBER,
PRESS_LOCAL_TIME TIMESTAMP,
MEASUREMENT_TYPE_KEY NUMBER,
MEASUREMENT NUMBER
)
PCTFREE 0
NOLOGGING
NOCOMPRESS
PARALLEL (DEGREE DEFAULT);

BEGIN

FOR I IN 11..26 LOOP --16 different device IDs

INSERT INTO CAPSTONE_DEMO.CAPSTONE_PARALLEL_TEST_V1

(
DEVICE_ID,
PRESS_LOCAL_TIME,
MEASUREMENT_TYPE_KEY,
MEASUREMENT
)

SELECT
  I AS DEVICE_ID,
  TO_DATE(20161231, 'yyyymmdd') + NUMTODSINTERVAL(DBMS_RANDOM.VALUE(-365*6/12, 0.49), 'day') AS PRESS_LOCAL_TIME, --Creating a random timestamp between the beginning of 2011 and the end of the 2016.  16 monthly partitions when needed.
  ROUND(DBMS_RANDOM.VALUE(1, 2),0) AS MEASUREMENT_TYPE_KEY, -- A generic measurement type key.  1 or 2
  ROUND(DBMS_RANDOM.VALUE(999.51, 2000.49),0) AS MEASUREMENT -- A generic measure of some sort for analytic functions
FROM DUAL
CONNECT BY LEVEL <= 20000000;

COMMIT;

END LOOP;

END;
/
BEGIN

DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => 'CAPSTONE_DEMO', TABNAME => 'CAPSTONE_PARALLEL_TEST_V1', GRANULARITY => 'ALL', ESTIMATE_PERCENT => DBMS_STATS.AUTO_SAMPLE_SIZE, DEGREE => 4, CASCADE => DBMS_STATS.AUTO_CASCADE);
DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => 'CAPSTONE_DEMO', TABNAME => 'CAPSTONE_PARALLEL_TEST_V2', GRANULARITY => 'ALL', ESTIMATE_PERCENT => DBMS_STATS.AUTO_SAMPLE_SIZE, DEGREE => 4, CASCADE => DBMS_STATS.AUTO_CASCADE);
DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => 'CAPSTONE_DEMO', TABNAME => 'CAPSTONE_PARALLEL_TEST_V3', GRANULARITY => 'ALL', ESTIMATE_PERCENT => DBMS_STATS.AUTO_SAMPLE_SIZE, DEGREE => 4, CASCADE => DBMS_STATS.AUTO_CASCADE);
DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => 'CAPSTONE_DEMO', TABNAME => 'CAPSTONE_PARALLEL_TEST_V4', GRANULARITY => 'ALL', ESTIMATE_PERCENT => DBMS_STATS.AUTO_SAMPLE_SIZE, DEGREE => 4, CASCADE => DBMS_STATS.AUTO_CASCADE);

END;
/

--Create a partitioned table by DEVICE_ID
TRUNCATE TABLE CAPSTONE_DEMO.CAPSTONE_PARALLEL_TEST_V2;
DROP TABLE CAPSTONE_DEMO.CAPSTONE_PARALLEL_TEST_V2;
CREATE TABLE CAPSTONE_DEMO.CAPSTONE_PARALLEL_TEST_V2


PARTITION BY RANGE (DEVICE_ID)
  INTERVAL (1)
  (PARTITION "P0" VALUES LESS THAN (1) SEGMENT CREATION DEFERRED)
PCTFREE 0
NOLOGGING
NOCOMPRESS
PARALLEL (DEGREE DEFAULT)

AS

SELECT
  *
FROM CAPSTONE_DEMO.CAPSTONE_PARALLEL_TEST_V1;

--Create a partitioned table by month
TRUNCATE TABLE CAPSTONE_DEMO.CAPSTONE_PARALLEL_TEST_V3;
DROP TABLE CAPSTONE_DEMO.CAPSTONE_PARALLEL_TEST_V3;
CREATE TABLE CAPSTONE_DEMO.CAPSTONE_PARALLEL_TEST_V3

PARTITION BY RANGE (PRESS_LOCAL_TIME)
  INTERVAL(NUMTOYMINTERVAL(1, 'MONTH'))
(PARTITION p0 VALUES LESS THAN (TO_TIMESTAMP('01-JAN-2007', 'DD-MON-YYYY')))
PCTFREE 0
NOLOGGING
NOCOMPRESS
PARALLEL (DEGREE DEFAULT)

AS

SELECT
  *
FROM CAPSTONE_DEMO.CAPSTONE_PARALLEL_TEST_V1;

--Create a partitioned table by Month and subpartitioned by DEVICE_ID
TRUNCATE TABLE CAPSTONE_DEMO.CAPSTONE_PARALLEL_TEST_V4;
DROP TABLE CAPSTONE_DEMO.CAPSTONE_PARALLEL_TEST_V4;
CREATE TABLE CAPSTONE_DEMO.CAPSTONE_PARALLEL_TEST_V4


PARTITION BY RANGE (PRESS_LOCAL_TIME)
  INTERVAL(NUMTOYMINTERVAL(1, 'MONTH'))
SUBPARTITION BY HASH (DEVICE_ID)
  SUBPARTITIONS 16
(PARTITION p0 VALUES LESS THAN (TO_TIMESTAMP('01-JAN-2007', 'DD-MON-YYYY')))
PCTFREE 0
NOLOGGING
NOCOMPRESS
PARALLEL (DEGREE DEFAULT)

AS

SELECT
  *
FROM CAPSTONE_DEMO.CAPSTONE_PARALLEL_TEST_V1;
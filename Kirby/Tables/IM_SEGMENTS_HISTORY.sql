TRUNCATE TABLE CAPSTONE_DEMO.IM_SEGMENTS_HISTORY;
DROP TABLE CAPSTONE_DEMO.IM_SEGMENTS_HISTORY;
CREATE TABLE CAPSTONE_DEMO.IM_SEGMENTS_HISTORY
(
SNAPSHOT_TS TIMESTAMP,
SNAPSHOT_ID NUMBER,
OWNER VARCHAR2(128),
SEGMENT_NAME VARCHAR2(128),
PARTITION_NAME VARCHAR2(128),
SEGMENT_TYPE VARCHAR2(18),
TABLESPACE_NAME VARCHAR2(30),
INMEMORY_SIZE NUMBER,
BYTES NUMBER,
BYTES_NOT_POPULATED NUMBER,
POPULATE_STATUS VARCHAR2(9),
INMEMORY_PRIORITY VARCHAR2(8),
INMEMORY_DISTRIBUTE VARCHAR2(15),
INMEMORY_DUPLICATE VARCHAR2(13),
INMEMORY_COMPRESSION VARCHAR2(17),
CON_ID NUMBER
);


INSERT INTO CAPSTONE_DEMO.IM_SEGMENTS_HISTORY

SELECT
SYSTIMESTAMP AS SNAPSHOT_TS,
NULL AS SNAPSHOT_ID,
A.OWNER,
A.SEGMENT_NAME,
A.PARTITION_NAME,
A.SEGMENT_TYPE,
A.TABLESPACE_NAME,
A.INMEMORY_SIZE,
A.BYTES,
A.BYTES_NOT_POPULATED,
A.POPULATE_STATUS,
A.INMEMORY_PRIORITY,
A.INMEMORY_DISTRIBUTE,
A.INMEMORY_DUPLICATE,
A.INMEMORY_COMPRESSION,
A.CON_ID
FROM V$IM_SEGMENTS A;

COMMIT;

SELECT
  SNAPSHOT_TS,
  ROUND(CAPSTONE_DEMO.INTERVAL_TO_SEC(SNAPSHOT_TS - FIRST_VALUE(SNAPSHOT_TS) OVER(ORDER BY SNAPSHOT_TS ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)),0) AS DURATION_SEC,
  SUM(INMEMORY_SIZE)/POWER(1024,3) AS INMEMORY_SIZE_GB
FROM CAPSTONE_DEMO.IM_SEGMENTS_HISTORY
GROUP BY
  SNAPSHOT_TS
ORDER BY
  SNAPSHOT_TS DESC;
  
SELECT 
  
FROM CAPSTONE_DEMO.IM_SEGMENTS_HISTORY;

SELECT
  SEGMENT_NAME,
  INMEMORY_PRIORITY,
  INMEMORY_COMPRESSION,
  POPULATE_STATUS,
  INMEMORY_SIZE/POWER(1024,3) AS INMEMORY_SIZE_GB,
  BYTES/POWER(1024,3) AS TOTAL_SIZE_GB,
  BYTES_NOT_POPULATED/POWER(1024,3) AS BYTES_NOT_POPULATED_GB
FROM V$IM_SEGMENTS;

SELECT
  COUNT(*)
FROM V$IM_SEGMENTS
WHERE POPULATE_STATUS = 'COMPLETED';
ALTER SESSION SET WORKAREA_SIZE_POLICY = MANUAL;
ALTER SESSION SET SORT_AREA_SIZE = 2147483647;
ALTER SESSION SET HASH_AREA_SIZE = 2147483647;

/*
1)  Creating a table to monitor resource usage per SID/SQL_ID/SQL_START_EXEC_TIME
*/

DROP TABLE CAPSTONE_DEMO.RESOURCE_USAGE_MONITORING;
TRUNCATE TABLE CAPSTONE_DEMO.RESOURCE_USAGE_MONITORING;
CREATE TABLE CAPSTONE_DEMO.RESOURCE_USAGE_MONITORING

(
EXPERIMENT_NUMBER NUMBER,
RUN_NUMBER NUMBER,
PGA_MAX_SIZE NUMBER,
DB_BIG_TABLE_CACHE_PERCENT NUMBER,
DB_CACHE_SIZE NUMBER,
PARALLEL_DEGREE_POLICY VARCHAR2(64),
PARALLEL_MIN_TIME_THRESHOLD VARCHAR2(64),
PGA_AGGREGATE_LIMIT NUMBER,
PGA_AGGREGATE_TARGET NUMBER,
SGA_MAX_SIZE NUMBER,
SGA_TARGET NUMBER,
SNAPSHOT_TS TIMESTAMP,
SQL_ID VARCHAR2(32),
SQL_EXEC_START TIMESTAMP,
QCSID NUMBER,
SID NUMBER,
DB_TIME NUMBER,
ELAPSED_TIME NUMBER,
CPU_TIME NUMBER,
BUFFER_GETS NUMBER,
DISK_READS NUMBER,
DIRECT_WRITES NUMBER,
IO_INTERCONNECT_BYTES NUMBER,
PHYSICAL_READ_REQUESTS NUMBER,
PHYSICAL_READ_BYTES NUMBER,
PHYSICAL_WRITE_REQUESTS NUMBER,
PHYSICAL_WRITE_BYTES NUMBER,
USER_IO_WAIT_TIME NUMBER,
OPERATION_ID NUMBER,
GROUP_BY_HASH_WORK_AREA_SIZE NUMBER,
GROUP_BY_HASH_EXPECTED_SIZE NUMBER,
GROUP_BY_HASH_ACTUAL_MEM_USED NUMBER,
GROUP_BY_HASH_MAX_MEM_USED NUMBER,
GROUP_BY_HASH_NUMBER_PASSES NUMBER,
GROUP_BY_HASH_TEMPSEG_SIZE NUMBER,
SORT_V2_WORK_AREA_SIZE NUMBER,
SORT_V2_EXPECTED_SIZE NUMBER,
SORT_V2_ACTUAL_MEM_USED NUMBER,
SORT_V2_MAX_MEM_USED NUMBER,
SORT_V2_NUMBER_PASSES NUMBER,
SORT_V2_TEMPSEG_SIZE NUMBER,
HASH_JOIN_WORK_AREA_SIZE NUMBER,
HASH_JOIN_EXPECTED_SIZE NUMBER,
HASH_JOIN_ACTUAL_MEM_USED NUMBER,
HASH_JOIN_MAX_MEM_USED NUMBER,
HASH_JOIN_NUMBER_PASSES NUMBER,
HASH_JOIN_TEMPSEG_SIZE NUMBER,
WINDOW_SORT_WORK_AREA_SIZE NUMBER,
WINDOW_SORT_EXPECTED_SIZE NUMBER,
WINDOW_SORT_ACTUAL_MEM_USED NUMBER,
WINDOW_SORT_MAX_MEM_USED NUMBER,
WINDOW_SORT_NUMBER_PASSES NUMBER,
WINDOW_SORT_TEMPSEG_SIZE NUMBER,
SQL_FULL_TEXT VARCHAR2(2000)
);


BEGIN -- Gather Stats

DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => 'CAPSTONE_DEMO', TABNAME => 'RESOURCE_USAGE_MONITORING', GRANULARITY => 'ALL', ESTIMATE_PERCENT => DBMS_STATS.AUTO_SAMPLE_SIZE, DEGREE => 1, CASCADE => DBMS_STATS.AUTO_CASCADE);

END;
/


--New method for monitoring resource usage
WITH FINDING_SQL_START AS --DONT_FIND_ME

(
SELECT DISTINCT
  LAST_VALUE(SQL_ID) OVER(ORDER BY SQL_EXEC_START ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS SQL_ID,
  LAST_VALUE(SQL_EXEC_START) OVER(ORDER BY SQL_EXEC_START ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS SQL_EXEC_START,
  LAST_VALUE(SID) OVER(ORDER BY SQL_EXEC_START ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS SID
FROM V$SQL_MONITOR
WHERE SQL_TEXT LIKE '%FIND_ME%'
AND SQL_TEXT NOT LIKE '%DONT_FIND_ME%'
),

FINDING_SIDS AS

(
SELECT
  SQL_ID,
  SQL_EXEC_START,
  SID,
  SADDR
FROM V$SESSION
WHERE SQL_EXEC_START = (SELECT SQL_EXEC_START FROM FINDING_SQL_START)
),

WORKAREA_MOD AS

(
SELECT 
  A.SQL_ID,
  A.SQL_EXEC_START,
  A.SID,
  A.OPERATION_TYPE,
  A.OPERATION_ID,
  A.WORK_AREA_SIZE,
  A.EXPECTED_SIZE,
  A.ACTUAL_MEM_USED,
  A.MAX_MEM_USED,
  A.NUMBER_PASSES,
  A.TEMPSEG_SIZE
FROM V$SQL_WORKAREA_ACTIVE A
  INNER JOIN FINDING_SQL_START B
    ON A.SQL_EXEC_START = B.SQL_EXEC_START
),

WORKAREA_PIVOT AS

(
SELECT
  *
FROM WORKAREA_MOD
PIVOT (
  SUM(WORK_AREA_SIZE) AS WORK_AREA_SIZE,
  SUM(EXPECTED_SIZE) AS EXPECTED_SIZE,
  SUM(ACTUAL_MEM_USED) AS ACTUAL_MEM_USED,
  SUM(MAX_MEM_USED) AS MAX_MEM_USED,
  SUM(NUMBER_PASSES) AS NUMBER_PASSES,
  SUM(TEMPSEG_SIZE) AS TEMPSEG_SIZE
  FOR OPERATION_TYPE IN 
                        ('GROUP BY (HASH)' AS GROUP_BY_HASH, 
                        'SORT (v2)' AS SORT_V2, 
                        'HASH-JOIN' AS HASH_JOIN,
                        'WINDOW (SORT)' AS WINDOW_SORT
                        )
      )
),

FINDING_SESSION_TIME_STATS AS

(
SELECT 
  C.SQL_ID,
  C.SQL_EXEC_START,
  C.SADDR,
  B.QCSID,
  B.SID,
  A.STAT_NAME,
  A.VALUE
FROM V$SESS_TIME_MODEL A
  INNER JOIN V$PX_SESSION B
    ON A.SID = B.SID
  INNER JOIN FINDING_SIDS C
    ON B.SID = C.SID
),

PIVOT_SESSION_TIME_STATS AS

(
SELECT
  *
FROM FINDING_SESSION_TIME_STATS
PIVOT (
  SUM(VALUE)
  FOR STAT_NAME IN ('DB time' AS DB_TIME, 'sql execute elapsed time' AS ELAPSED_TIME, 'DB CPU' AS CPU_TIME)
  )
),

IO_DATA AS

(
SELECT
  SQL_ID,
  SQL_EXEC_START,
  SID,
  BUFFER_GETS,
  DISK_READS,
  DIRECT_WRITES,
  IO_INTERCONNECT_BYTES,
  PHYSICAL_READ_REQUESTS,
  PHYSICAL_READ_BYTES,
  PHYSICAL_WRITE_REQUESTS,
  PHYSICAL_WRITE_BYTES,
  USER_IO_WAIT_TIME,
  SQL_TEXT
FROM V$SQL_MONITOR
)

SELECT
  NULL AS EXPERIMENT_NUMBER,
  NULL AS RUN_NUMBER,
  (SELECT VALUE FROM V$PARAMETER WHERE NAME = '_pga_max_size') AS PGA_MAX_SIZE,
  (SELECT VALUE FROM V$PARAMETER WHERE NAME = 'db_big_table_cache_percent_target') AS DB_BIG_TABLE_CACHE_PERCENT,
  (SELECT VALUE FROM V$PARAMETER WHERE NAME = 'db_cache_size') AS DB_CACHE_SIZE,
  (SELECT VALUE FROM V$PARAMETER WHERE NAME = 'parallel_degree_policy') AS PARALLEL_DEGREE_POLICY,
  (SELECT VALUE FROM V$PARAMETER WHERE NAME = 'parallel_min_time_threshold') AS PARALLEL_MIN_TIME_THRESHOLD,
  (SELECT VALUE FROM V$PARAMETER WHERE NAME = 'pga_aggregate_limit') AS PGA_AGGREGATE_LIMIT,
  (SELECT VALUE FROM V$PARAMETER WHERE NAME = 'pga_aggregate_target') AS PGA_AGGREGATE_TARGET,
  (SELECT VALUE FROM V$PARAMETER WHERE NAME = 'sga_max_size') AS SGA_MAX_SIZE,
  (SELECT VALUE FROM V$PARAMETER WHERE NAME = 'sga_target') AS SGA_TARGET,
  SYSTIMESTAMP AS SNAPSHOT_TS,
  A.SQL_ID,
  A.SQL_EXEC_START,
  A.QCSID,
  A.SID,
  A.DB_TIME,
  A.ELAPSED_TIME,
  A.CPU_TIME,
  C.BUFFER_GETS,
  C.DISK_READS,
  C.DIRECT_WRITES,
  C.IO_INTERCONNECT_BYTES,
  C.PHYSICAL_READ_REQUESTS,
  C.PHYSICAL_READ_BYTES,
  C.PHYSICAL_WRITE_REQUESTS,
  C.PHYSICAL_WRITE_BYTES,
  C.USER_IO_WAIT_TIME,
  B.OPERATION_ID,
  B.GROUP_BY_HASH_WORK_AREA_SIZE,
  B.GROUP_BY_HASH_EXPECTED_SIZE,
  GROUP_BY_HASH_ACTUAL_MEM_USED,
  GROUP_BY_HASH_MAX_MEM_USED,
  GROUP_BY_HASH_NUMBER_PASSES,
  GROUP_BY_HASH_TEMPSEG_SIZE,
  SORT_V2_WORK_AREA_SIZE,
  SORT_V2_EXPECTED_SIZE,
  SORT_V2_ACTUAL_MEM_USED,
  SORT_V2_MAX_MEM_USED,
  SORT_V2_NUMBER_PASSES,
  SORT_V2_TEMPSEG_SIZE,
  HASH_JOIN_WORK_AREA_SIZE,
  HASH_JOIN_EXPECTED_SIZE,
  HASH_JOIN_ACTUAL_MEM_USED,
  HASH_JOIN_MAX_MEM_USED,
  HASH_JOIN_NUMBER_PASSES,
  HASH_JOIN_TEMPSEG_SIZE,
  WINDOW_SORT_WORK_AREA_SIZE,
  WINDOW_SORT_EXPECTED_SIZE,
  WINDOW_SORT_ACTUAL_MEM_USED,
  WINDOW_SORT_MAX_MEM_USED,
  WINDOW_SORT_NUMBER_PASSES,
  WINDOW_SORT_TEMPSEG_SIZE,
  C.SQL_TEXT
FROM PIVOT_SESSION_TIME_STATS A
  LEFT OUTER JOIN WORKAREA_PIVOT B
    ON A.SQL_EXEC_START = B.SQL_EXEC_START
    AND A.SID = B.SID
    AND A.SQL_ID = B.SQL_ID
  LEFT OUTER JOIN IO_DATA C
    ON A.SQL_EXEC_START = C.SQL_EXEC_START
    AND A.SID = C.SID
    AND A.SQL_ID = C.SQL_ID;
    
BEGIN

FOR X IN 1..2000 LOOP

CAPSTONE_DEMO.RESOURCE_MONITOR.RESOURCE_USAGE_MONITORING('TESTING');

DBMS_LOCK.SLEEP(SECONDS => 2);

END LOOP;

END;
/

SELECT
  SQL_TEXT,
  COUNT(*)
FROM V$SQL
GROUP BY
  SQL_TEXT;

SELECT DISTINCT
  TABLE_NAME,
  COLUMN_NAME
FROM ALL_TAB_COLS
WHERE COLUMN_NAME LIKE '%SQL%TEXT%'
ORDER BY
  TABLE_NAME;
  
SELECT 
  NAME,
  VALUE,
  DISPLAY_VALUE,
  ISDEFAULT,
  ISSES_MODIFIABLE,
  ISSYS_MODIFIABLE,
  ISPDB_MODIFIABLE,
  ISINSTANCE_MODIFIABLE,
  ISMODIFIED,
  ISADJUSTED,
  DESCRIPTION,
  UPPER(NAME),
  '(SELECT VALUE FROM V$PARAMETER WHERE NAME = ''' || NAME || ''') AS ' || UPPER(NAME) || ',' AS SELECT_STATEMENT
FROM V$PARAMETER
WHERE NAME IN ('pga_aggregate_limit', 'pga_aggregate_target', '_pga_max_size', 'sga_max_size', 'sga_target', 'db_cache_size', 'db_big_table_cache_percent_target', 'parallel_degree_policy', 'parallel_min_time_threshold')
--WHERE LOWER(NAME) LIKE '%max_size%'
ORDER BY
  NAME;
/*
1)  Creating a table to monitor resource usage per SID/SQL_ID/SQL_START_EXEC_TIME
*/

DROP TABLE CAPSTONE_DEMO.RESOURCE_USAGE_MONITORING;
TRUNCATE TABLE CAPSTONE_DEMO.RESOURCE_USAGE_MONITORING;
CREATE TABLE CAPSTONE_DEMO.RESOURCE_USAGE_MONITORING

(
SNAPSHOT_TS TIMESTAMP,
SQL_EXEC_START TIMESTAMP,
SQL_ID VARCHAR2(20),
QCSID NUMBER,
SID NUMBER,
DB_TIME_SEC NUMBER,
ELAPSED_TIME_SEC NUMBER,
CPU_TIME_SEC NUMBER,
PGA_USED_MEM_BYTES NUMBER,
PGA_ALLOC_MEM_BYTES NUMBER,
PGA_MAX_MEM_BYTES NUMBER,
PGA_FREEABLE_MEM_BYTES NUMBER,
TEMP_EXTENTS NUMBER,
TEMP_BLOCKS NUMBER,
TEMP_BLOCK_SIZE_BYTES NUMBER
);

CREATE OR REPLACE VIEW CAPSTONE_DEMO.RESOURCE_USAGE_SUMMARY_V AS

WITH RUN_SUMMARY AS

(
SELECT
  SNAPSHOT_TS,
  SQL_EXEC_START,
  CAPSTONE_DEMO.INTERVAL_TO_SEC(SNAPSHOT_TS - SQL_EXEC_START) AS RUN_TIME_SEC,
  COUNT(*) - 1 AS PX_SERVER_COUNT, 
  MAX(SQL_ID) AS SQL_ID,
  SUM(DB_TIME_SEC) AS DB_TIME,
  MAX(ELAPSED_TIME_SEC) AS WALL_TIME,
  SUM(CPU_TIME_SEC) AS CPU_TIME,
  SUM(A.PGA_USED_MEM_BYTES)/POWER(1024, 3) AS PGA_USED_GB,
  SUM(A.PGA_ALLOC_MEM_BYTES)/POWER(1024, 3) AS PGA_ALLOCATED_GB,
  SUM(A.PGA_MAX_MEM_BYTES)/POWER(1024, 3) AS PGA_MAX_MEM_GB,
  SUM(A.PGA_FREEABLE_MEM_BYTES)/POWER(1024, 3) AS PGA_FREEABLE_MEM_GB,
  SUM(TEMP_BLOCKS * TEMP_BLOCK_SIZE_BYTES)/POWER(1024, 3) AS TEMP_SPACE_USED_GB,
  ROUND(SUM(DB_TIME_SEC)/MAX(ELAPSED_TIME_SEC),2) AS PEI
FROM CAPSTONE_DEMO.RESOURCE_USAGE_MONITORING A
GROUP BY
  SNAPSHOT_TS,
  SQL_EXEC_START
)

SELECT
  DENSE_RANK() OVER(PARTITION BY SQL_ID ORDER BY SQL_EXEC_START) AS SQL_ID_RUN_NUMBER,
  A.*
FROM RUN_SUMMARY A
ORDER BY
  SNAPSHOT_TS DESC;
  
SELECT
  *
FROM CAPSTONE_DEMO.RESOURCE_USAGE_SUMMARY_V;
  
SELECT * FROM V$SQL_MONITOR;

WITH FINDING_SQL_START AS --DONT_FIND_ME

(
SELECT DISTINCT
  LAST_VALUE(SQL_ID) OVER(ORDER BY SQL_EXEC_START ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS SQL_ID,
  LAST_VALUE(SQL_EXEC_START) OVER(ORDER BY SQL_EXEC_START ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS SQL_EXEC_START,
  LAST_VALUE(SID) OVER(ORDER BY SQL_EXEC_START ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS SID
FROM V$SQL_MONITOR
WHERE SQL_TEXT LIKE '%FIND_ME%'
AND SQL_TEXT NOT LIKE '%DONT_FIND_ME%'
),

FINDING_SIDS AS

(

SELECT
  SQL_ID,
  SQL_EXEC_START,
  SID,
  SADDR
FROM V$SESSION
WHERE SQL_EXEC_START = (SELECT SQL_EXEC_START FROM FINDING_SQL_START)
),

FINDING_SESSION_TIME_STATS AS

(
SELECT 
  C.SQL_ID,
  C.SQL_EXEC_START,
  C.SADDR,
  B.QCSID,
  B.SID,
  A.STAT_NAME,
  A.VALUE
FROM V$SESS_TIME_MODEL A
  INNER JOIN V$PX_SESSION B
    ON A.SID = B.SID
  INNER JOIN FINDING_SIDS C
    ON B.SID = C.SID
),

PIVOT_SESSION_TIME_STATS AS

(
SELECT
  *
FROM FINDING_SESSION_TIME_STATS
PIVOT (
  SUM(VALUE)
  FOR STAT_NAME IN ('DB time' AS DB_TIME, 'sql execute elapsed time' AS ELAPSED_TIME, 'DB CPU' AS CPU_TIME)
  )
),

PGA_TEMP_USAGE_STATS AS

(
SELECT 
  B.SQL_ID,
  B.PROGRAM,
  A.PNAME,
  B.SID,
  A.PID,
  A.SPID,
  A.PGA_USED_MEM AS PGA_USED_MEM_BYTES,
  A.PGA_ALLOC_MEM AS PGA_ALLOC_MEM_BYTES,
  A.PGA_MAX_MEM AS PGA_MAX_MEM_BYTES,
  A.PGA_FREEABLE_MEM AS PGA_FREEABLE_MEM_BYTES,
  C.EXTENTS,
  C.BLOCKS
FROM V$PROCESS A
  INNER JOIN V$SESSION B
    ON A.ADDR = B.PADDR
  LEFT JOIN V$TEMPSEG_USAGE C
    ON C.SESSION_ADDR = B.SADDR
)

SELECT
  SYSTIMESTAMP AS SNAPSHOT_TS,
  A.SQL_EXEC_START,
  A.SQL_ID,
  A.QCSID,
  A.SID,
  A.DB_TIME/1E6 AS DB_TIME_SEC,
  A.ELAPSED_TIME/1E6 AS ELAPSED_TIME_SEC,
  A.CPU_TIME/1E6 AS CPU_TIME_SEC,
  B.PGA_USED_MEM_BYTES,
  B.PGA_ALLOC_MEM_BYTES,
  B.PGA_MAX_MEM_BYTES,
  B.PGA_FREEABLE_MEM_BYTES,
  NVL(B.EXTENTS,0) AS TEMP_EXTENTS,
  NVL(B.BLOCKS,0) AS TEMP_BLOCKS,
  (SELECT BLOCK_SIZE FROM DBA_TABLESPACES WHERE TABLESPACE_NAME = 'TEMP') AS TEMP_BLOCK_SIZE_BYTES
FROM PIVOT_SESSION_TIME_STATS A
  INNER JOIN PGA_TEMP_USAGE_STATS B
    ON A.SQL_ID = B.SQL_ID
    AND A.SID = B.SID;

BEGIN

FOR X IN 1..200 LOOP

CAPSTONE_DEMO.RESOURCE_MONITOR.RESOURCE_USAGE_MONITORING('TESTING');

DBMS_LOCK.SLEEP(SECONDS => 1);

END LOOP;

END;
/

SELECT
  *
FROM CAPSTONE_DEMO.RESOURCE_USAGE_SUMMARY_V;

SELECT
  *
FROM CAPSTONE_DEMO.RESOURCE_USAGE_MONITORING;
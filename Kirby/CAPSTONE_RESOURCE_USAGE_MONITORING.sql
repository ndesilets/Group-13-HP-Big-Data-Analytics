/*
1)  Creating a table to monitor resource usage per SID/SQL_ID/SQL_START_EXEC_TIME
*/

DROP TABLE CAPSTONE_DEMO.RESOURCE_USAGE_MONITORING;
TRUNCATE TABLE CAPSTONE_DEMO.RESOURCE_USAGE_MONITORING;
CREATE TABLE CAPSTONE_DEMO.RESOURCE_USAGE_MONITORING

(
SNAPSHOT_TS TIMESTAMP,
SQL_EXEC_START TIMESTAMP,
SQL_ID VARCHAR2(20),
QCSID NUMBER,
SID NUMBER,
DB_TIME_SEC NUMBER,
ELAPSED_TIME_SEC NUMBER,
CPU_TIME_SEC NUMBER
);

CREATE OR REPLACE VIEW CAPSTONE_DEMO.RESOURCE_USAGE_SUMMARY_V AS

WITH RUN_SUMMARY AS

(
SELECT
  SNAPSHOT_TS,
  SQL_EXEC_START,
  CAPSTONE_DEMO.INTERVAL_TO_SEC(SNAPSHOT_TS - SQL_EXEC_START) AS RUN_TIME_SEC,
  COUNT(*) - 1 AS PX_SERVER_COUNT, 
  MAX(SQL_ID) AS SQL_ID,
  SUM(DB_TIME_SEC) AS DB_TIME,
  MAX(ELAPSED_TIME_SEC) AS WALL_TIME,
  SUM(CPU_TIME_SEC) AS CPU_TIME,
  ROUND(SUM(DB_TIME_SEC)/MAX(ELAPSED_TIME_SEC),2) AS PEI
FROM CAPSTONE_DEMO.RESOURCE_USAGE_MONITORING
GROUP BY
  SNAPSHOT_TS,
  SQL_EXEC_START
)

SELECT
  RANK() OVER(PARTITION BY SQL_ID ORDER BY SQL_EXEC_START) AS SQL_ID_RUN_NUMBER,
  A.*
FROM RUN_SUMMARY A
ORDER BY
  SNAPSHOT_TS DESC;
  
SELECT
  *
FROM CAPSTONE_DEMO.RESOURCE_USAGE_SUMMARY_V;
  
PROCEDURE RESOURCE_USAGE_MONITORING(DATA_POINTS NUMBER, WAIT_TIME_SEC NUMBER) AS

BEGIN

FOR X IN 1..DATA_POINTS LOOP

INSERT INTO CAPSTONE_DEMO.CPU_USAGE_MONITORING

WITH FINDING_SQL_START AS --DONT_FIND_ME

(
SELECT DISTINCT
  LAST_VALUE(SQL_ID) OVER(ORDER BY SQL_EXEC_START ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS SQL_ID,
  LAST_VALUE(SQL_EXEC_START) OVER(ORDER BY SQL_EXEC_START ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS SQL_EXEC_START,
  LAST_VALUE(SID) OVER(ORDER BY SQL_EXEC_START ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS SID
FROM V$SQL_MONITOR 
WHERE SQL_TEXT LIKE '%FIND_ME%'
AND SQL_TEXT NOT LIKE '%DONT_FIND_ME%'
),

FINDING_SIDS AS

(

SELECT
  SQL_ID,
  SQL_EXEC_START,
  SID
FROM V$SESSION
WHERE SQL_EXEC_START = (SELECT SQL_EXEC_START FROM FINDING_SQL_START)
),

TESTING AS

(
SELECT 
  C.SQL_ID,
  C.SQL_EXEC_START,
  B.QCSID,
  B.SID,
  A.STAT_NAME,
  A.VALUE
FROM V$SESS_TIME_MODEL A
  INNER JOIN V$PX_SESSION B
    ON A.SID = B.SID
  INNER JOIN FINDING_SIDS C
    ON B.SID = C.SID
),

TESTING_PIVOT AS

(
SELECT
  *
FROM TESTING
PIVOT (
  SUM(VALUE)
  FOR STAT_NAME IN ('DB time' AS DB_TIME, 'sql execute elapsed time' AS ELAPSED_TIME, 'DB CPU' AS CPU_TIME)
  )
)

SELECT
  SYSTIMESTAMP AS SNAPSHOT_TS,
  SQL_EXEC_START,
  SQL_ID,
  QCSID,
  SID,
  DB_TIME/1E6 AS DB_TIME_SEC,
  ELAPSED_TIME/1E6 AS ELAPSED_TIME_SEC,
  CPU_TIME/1E6 AS CPU_TIME_SEC
FROM TESTING_PIVOT A;

COMMIT;

DBMS_LOCK.SLEEP(SECONDS => WAIT_TIME_SEC);

END LOOP;
END RESOURCE_USAGE_MONITORING;

BEGIN

FOR X IN 1..10 LOOP

CAPSTONE_DEMO.RESOURCE_MONITOR.RESOURCE_USAGE_MONITORING('TESTING');

DBMS_LOCK.SLEEP(SECONDS => 2);

END LOOP;

END;
/

SELECT
  *
FROM CAPSTONE_DEMO.RESOURCE_USAGE_MONITORING;
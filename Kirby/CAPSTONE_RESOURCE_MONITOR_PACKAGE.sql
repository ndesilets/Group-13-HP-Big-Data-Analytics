CREATE OR REPLACE PACKAGE CAPSTONE_DEMO.RESOURCE_MONITOR AS 

PROCEDURE RESOURCE_USAGE_MONITORING(VIEW_NAME VARCHAR2);
  
END RESOURCE_MONITOR;
/

CREATE OR REPLACE PACKAGE BODY CAPSTONE_DEMO.RESOURCE_MONITOR AS 

PROCEDURE RESOURCE_USAGE_MONITORING(VIEW_NAME VARCHAR2) AS

BEGIN

INSERT INTO CAPSTONE_DEMO.RESOURCE_USAGE_MONITORING

WITH FINDING_SQL_START AS --DONT_FIND_ME

(
SELECT DISTINCT
  LAST_VALUE(SQL_ID) OVER(ORDER BY SQL_EXEC_START ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS SQL_ID,
  LAST_VALUE(SQL_EXEC_START) OVER(ORDER BY SQL_EXEC_START ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS SQL_EXEC_START,
  LAST_VALUE(SID) OVER(ORDER BY SQL_EXEC_START ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS SID
FROM V$SQL_MONITOR
WHERE SQL_TEXT LIKE '%FIND_ME%'
AND SQL_TEXT NOT LIKE '%DONT_FIND_ME%'
),

FINDING_SIDS AS

(
SELECT
  SQL_ID,
  SQL_EXEC_START,
  SID,
  SADDR
FROM V$SESSION
WHERE SQL_EXEC_START = (SELECT SQL_EXEC_START FROM FINDING_SQL_START)
),

WORKAREA_MOD AS

(
SELECT 
  A.SQL_ID,
  A.SQL_EXEC_START,
  A.SID,
  A.OPERATION_TYPE,
  A.OPERATION_ID,
  A.WORK_AREA_SIZE,
  A.EXPECTED_SIZE,
  A.ACTUAL_MEM_USED,
  A.MAX_MEM_USED,
  A.NUMBER_PASSES,
  A.TEMPSEG_SIZE
FROM V$SQL_WORKAREA_ACTIVE A
  INNER JOIN FINDING_SQL_START B
    ON A.SQL_EXEC_START = B.SQL_EXEC_START
),

WORKAREA_PIVOT AS

(
SELECT
  *
FROM WORKAREA_MOD
PIVOT (
  SUM(WORK_AREA_SIZE) AS WORK_AREA_SIZE,
  SUM(EXPECTED_SIZE) AS EXPECTED_SIZE,
  SUM(ACTUAL_MEM_USED) AS ACTUAL_MEM_USED,
  SUM(MAX_MEM_USED) AS MAX_MEM_USED,
  SUM(NUMBER_PASSES) AS NUMBER_PASSES,
  SUM(TEMPSEG_SIZE) AS TEMPSEG_SIZE
  FOR OPERATION_TYPE IN 
                        ('GROUP BY (HASH)' AS GROUP_BY_HASH, 
                        'SORT (v2)' AS SORT_V2, 
                        'HASH-JOIN' AS HASH_JOIN,
                        'WINDOW (SORT)' AS WINDOW_SORT
                        )
      )
),

FINDING_SESSION_TIME_STATS AS

(
SELECT 
  C.SQL_ID,
  C.SQL_EXEC_START,
  C.SADDR,
  B.QCSID,
  B.SID,
  A.STAT_NAME,
  A.VALUE
FROM V$SESS_TIME_MODEL A
  INNER JOIN V$PX_SESSION B
    ON A.SID = B.SID
  INNER JOIN FINDING_SIDS C
    ON B.SID = C.SID
),

PIVOT_SESSION_TIME_STATS AS

(
SELECT
  *
FROM FINDING_SESSION_TIME_STATS
PIVOT (
  SUM(VALUE)
  FOR STAT_NAME IN ('DB time' AS DB_TIME, 'sql execute elapsed time' AS ELAPSED_TIME, 'DB CPU' AS CPU_TIME)
  )
),

IO_DATA AS

(
SELECT
  SQL_ID,
  SQL_EXEC_START,
  SID,
  BUFFER_GETS,
  DISK_READS,
  DIRECT_WRITES,
  IO_INTERCONNECT_BYTES,
  PHYSICAL_READ_REQUESTS,
  PHYSICAL_READ_BYTES,
  PHYSICAL_WRITE_REQUESTS,
  PHYSICAL_WRITE_BYTES,
  USER_IO_WAIT_TIME
FROM V$SQL_MONITOR
)

SELECT
  NULL AS QUERY_IDENTIFIER,
  SYSTIMESTAMP AS SNAPSHOT_TS,
  A.SQL_ID,
  A.SQL_EXEC_START,
  A.QCSID,
  A.SID,
  A.DB_TIME,
  A.ELAPSED_TIME,
  A.CPU_TIME,
  C.BUFFER_GETS,
  DISK_READS,
  DIRECT_WRITES,
  IO_INTERCONNECT_BYTES,
  PHYSICAL_READ_REQUESTS,
  PHYSICAL_READ_BYTES,
  PHYSICAL_WRITE_REQUESTS,
  PHYSICAL_WRITE_BYTES,
  USER_IO_WAIT_TIME,
  B.OPERATION_ID,
  GROUP_BY_HASH_WORK_AREA_SIZE,
  GROUP_BY_HASH_EXPECTED_SIZE,
  GROUP_BY_HASH_ACTUAL_MEM_USED,
  GROUP_BY_HASH_MAX_MEM_USED,
  GROUP_BY_HASH_NUMBER_PASSES,
  GROUP_BY_HASH_TEMPSEG_SIZE,
  SORT_V2_WORK_AREA_SIZE,
  SORT_V2_EXPECTED_SIZE,
  SORT_V2_ACTUAL_MEM_USED,
  SORT_V2_MAX_MEM_USED,
  SORT_V2_NUMBER_PASSES,
  SORT_V2_TEMPSEG_SIZE,
  HASH_JOIN_WORK_AREA_SIZE,
  HASH_JOIN_EXPECTED_SIZE,
  HASH_JOIN_ACTUAL_MEM_USED,
  HASH_JOIN_MAX_MEM_USED,
  HASH_JOIN_NUMBER_PASSES,
  HASH_JOIN_TEMPSEG_SIZE,
  WINDOW_SORT_WORK_AREA_SIZE,
  WINDOW_SORT_EXPECTED_SIZE,
  WINDOW_SORT_ACTUAL_MEM_USED,
  WINDOW_SORT_MAX_MEM_USED,
  WINDOW_SORT_NUMBER_PASSES,
  WINDOW_SORT_TEMPSEG_SIZE
FROM PIVOT_SESSION_TIME_STATS A
  LEFT OUTER JOIN WORKAREA_PIVOT B
    ON A.SQL_EXEC_START = B.SQL_EXEC_START
    AND A.SID = B.SID
    AND A.SQL_ID = B.SQL_ID
  LEFT OUTER JOIN IO_DATA C
    ON A.SQL_EXEC_START = C.SQL_EXEC_START
    AND A.SID = C.SID
    AND A.SQL_ID = C.SQL_ID;

COMMIT;

END RESOURCE_USAGE_MONITORING;

END RESOURCE_MONITOR;
/

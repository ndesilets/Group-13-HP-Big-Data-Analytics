CREATE OR REPLACE PACKAGE CAPSTONE_DEMO.RESOURCE_MONITOR AS 

PROCEDURE RESOURCE_USAGE_MONITORING_V2(TIME_BETWEEN_LOOPS NUMBER);
PROCEDURE PARAMETERS_HISTORY_INSERT;
  
END RESOURCE_MONITOR;
/

CREATE OR REPLACE PACKAGE BODY CAPSTONE_DEMO.RESOURCE_MONITOR AS 

PROCEDURE RESOURCE_USAGE_MONITORING_V2(TIME_BETWEEN_LOOPS NUMBER) AS

STATUS VARCHAR2(5):='TRUE';
A NUMBER:= 0;

BEGIN

INSERT INTO CAPSTONE_DEMO.RESOURCE_MONITOR_STATUS(STATUS) VALUES('TRUE');
COMMIT;

WHILE STATUS = 'TRUE' LOOP
A:=A+1;

INSERT INTO CAPSTONE_DEMO.SQL_MONITOR_HISTORY

SELECT
  MODULE,
  ACTION,
  CLIENT_INFO,
  A AS SNAPSHOT_ID,
  SYSTIMESTAMP AS SNAPSHOT_TS,
  SQL_EXEC_START,
  SQL_ID,
  SID,
  PX_MAXDOP,
  PX_SERVERS_REQUESTED,
  PX_SERVERS_ALLOCATED,
  BUFFER_GETS,
  DISK_READS,
  DIRECT_WRITES,
  IO_INTERCONNECT_BYTES,
  PHYSICAL_READ_REQUESTS,
  PHYSICAL_READ_BYTES,
  PHYSICAL_WRITE_REQUESTS,
  PHYSICAL_WRITE_BYTES,
  USER_IO_WAIT_TIME,
  SQL_TEXT
FROM V$SQL_MONITOR A
WHERE A.ACTION = 'RESOURCE_MONITORING';

INSERT INTO CAPSTONE_DEMO.SQL_WORKAREA_ACTIVE_HISTORY

SELECT
  B.MODULE,
  B.ACTION,
  B.CLIENT_INFO,
  A AS SNAPSHOT_ID,
  SYSTIMESTAMP AS SNAPSHOT_TS,
  B.SQL_EXEC_START,
  B.SQL_ID,
  B.SID,
  A.OPERATION_TYPE,
  A.OPERATION_ID,
  A.WORK_AREA_SIZE,
  A.EXPECTED_SIZE,
  A.ACTUAL_MEM_USED,
  A.MAX_MEM_USED,
  A.NUMBER_PASSES,
  A.TEMPSEG_SIZE
FROM V$SQL_WORKAREA_ACTIVE A
  INNER JOIN V$SESSION B
    ON A.SID = B.SID
WHERE B.ACTION = 'RESOURCE_MONITORING';

INSERT INTO CAPSTONE_DEMO.SESSION_PROCESS_HISTORY

SELECT
  A.MODULE,
  A.ACTION,
  A.CLIENT_INFO,
  A AS SNAPSHOT_ID,
  SYSTIMESTAMP AS SNAPSHOT_TS,
  A.SQL_EXEC_START,
  A.SQL_ID,
  A.SID,
  A.SADDR,
  B.PGA_USED_MEM,
  B.PGA_ALLOC_MEM,
  B.PGA_FREEABLE_MEM,
  B.PGA_MAX_MEM
FROM V$SESSION A
  INNER JOIN V$PROCESS B
    ON A.PADDR = B.ADDR
WHERE A.ACTION = 'RESOURCE_MONITORING';

INSERT INTO CAPSTONE_DEMO.SESS_TIME_MODEL_PX_SESS_HIST

SELECT
  C.MODULE,
  C.ACTION,
  C.CLIENT_INFO,
  A AS SNAPSHOT_ID,
  SYSTIMESTAMP AS SNAPSHOT_TS,
  C.SQL_EXEC_START,
  C.SQL_ID,
  C.SID,
  A.STAT_NAME,
  A.VALUE,
  B.QCSID
FROM V$SESS_TIME_MODEL A
  INNER JOIN V$PX_SESSION B
    ON A.SID = B.SID
  INNER JOIN V$SESSION C
    ON A.SID = C.SID
WHERE C.ACTION = 'RESOURCE_MONITORING'
AND VALUE > 0;

COMMIT;

DBMS_LOCK.SLEEP(SECONDS => TIME_BETWEEN_LOOPS);
SELECT STATUS INTO STATUS FROM CAPSTONE_DEMO.RESOURCE_MONITOR_STATUS;

END LOOP;

END RESOURCE_USAGE_MONITORING_V2;

PROCEDURE PARAMETERS_HISTORY_INSERT AS

BEGIN

INSERT INTO CAPSTONE_DEMO.PARAMETERS_HISTORY

SELECT 
  SYSTIMESTAMP AS SNAPSHOT_TS,
  A.NAME,
  A.VALUE,
  A.DISPLAY_VALUE,
  A.ISDEFAULT,
  A.ISSES_MODIFIABLE,
  A.ISSYS_MODIFIABLE,
  A.ISPDB_MODIFIABLE,
  A.ISINSTANCE_MODIFIABLE,
  A.ISMODIFIED,
  A.ISADJUSTED,
  A.DESCRIPTION
FROM V$PARAMETER A
WHERE NAME IN (
                'pga_aggregate_limit', 
                'pga_aggregate_target', 
                '_pga_max_size', 
                'sga_max_size', 
                'sga_target', 
                'db_cache_size', 
                'db_big_table_cache_percent_target', 
                'parallel_degree_policy', 
                'parallel_min_time_threshold',
                'inmemory_size',
                'parallel_servers_target',
                'parallel_degree_limit',
                'parallel_degree_level',
                'parallel_threads_per_cpu',
                'parallel_execution_message_size',
                'parallel_min_servers',
                'parallel_max_servers',
                'parallel_adaptive_multi_user'
               );
               
COMMIT;

END PARAMETERS_HISTORY_INSERT;

END RESOURCE_MONITOR;
/

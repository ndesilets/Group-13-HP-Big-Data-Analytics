ALTER SESSION SET WORKAREA_SIZE_POLICY = MANUAL;
ALTER SESSION SET SORT_AREA_SIZE = 2147483647;
ALTER SESSION SET HASH_AREA_SIZE = 2147483647;

SELECT 
  * 
FROM CAPSTONE_DEMO.RESOURCE_USAGE_MONITORING 
--WHERE SQL_ID = 'f1fnc2m8fwu5u'
ORDER BY 
  SNAPSHOT_TS,
  SID;

SELECT
  CASE
    WHEN COLUMN_NAME LIKE '%SORT%' THEN 'SUM(NVL(' || COLUMN_NAME || ',0))/POWER(1024,3) AS ' || COLUMN_NAME || '_GB,' 
    WHEN COLUMN_NAME LIKE '%HASH%' THEN 'SUM(NVL(' || COLUMN_NAME || ',0))/POWER(1024,3) AS ' || COLUMN_NAME || '_GB,'
    ELSE 'SUM(NVL(' || COLUMN_NAME || ',0)) AS ' || COLUMN_NAME || ','
  END AS SUM_SYNTAX
FROM ALL_TAB_COLS
WHERE TABLE_NAME = 'RESOURCE_USAGE_MONITORING'
ORDER BY
  COLUMN_ID;

CREATE OR REPLACE VIEW CAPSTONE_DEMO.RESOURCE_USAGE_SUMMARY_V AS SELECT * FROM

(
/
WITH ALL_SECONDS AS

(
SELECT
  ROWNUM AS RUN_TIME_SEC
FROM DUAL
CONNECT BY LEVEL <= 2000
),

ALL_RUNS AS

(
SELECT DISTINCT
  SQL_EXEC_START,
  SQL_ID
FROM CAPSTONE_DEMO.RESOURCE_USAGE_MONITORING
)
,

ALL_RUNS_ALL_SECONDS AS

(
SELECT
  *
FROM ALL_SECONDS
  CROSS JOIN ALL_RUNS 
),

RESOURCE_USAGE_MOD AS

(
/

SELECT
  EXPERIMENT_NUMBER,
  RUN_NUMBER,
  PGA_MAX_SIZE,
  DB_BIG_TABLE_CACHE_PERCENT,
  DB_CACHE_SIZE,
  PARALLEL_DEGREE_POLICY,
  PARALLEL_MIN_TIME_THRESHOLD,
  PGA_AGGREGATE_LIMIT,
  PGA_AGGREGATE_TARGET,
  SGA_MAX_SIZE,
  SGA_TARGET,
  SQL_ID,
  SNAPSHOT_TS,
  SQL_EXEC_START,
  ROUND(CAPSTONE_DEMO.INTERVAL_TO_SEC(SNAPSHOT_TS - SQL_EXEC_START),0) AS RUN_TIME_SEC,
  COUNT(*) AS PX_SERVER_COUNT, 
  SUM(DB_TIME/1E6) AS DB_TIME,
  MAX(ELAPSED_TIME/1E6) AS WALL_TIME,
  SUM(CPU_TIME/1E6) AS CPU_TIME,
  SUM(NVL(BUFFER_GETS,0)) AS BUFFER_GETS,
  SUM(NVL(DISK_READS,0)) AS DISK_READS,
  SUM(NVL(DIRECT_WRITES,0)) AS DIRECT_WRITES,
  SUM(NVL(IO_INTERCONNECT_BYTES,0))/POWER(1024,3) AS IO_INTERCONNECT_GB,
  SUM(NVL(PHYSICAL_READ_REQUESTS,0)) AS PHYSICAL_READ_REQUESTS,
  SUM(NVL(PHYSICAL_READ_BYTES,0))/POWER(1024,3) AS PHYSICAL_READ_GB,
  SUM(NVL(PHYSICAL_WRITE_REQUESTS,0)) AS PHYSICAL_WRITE_REQUESTS,
  SUM(NVL(PHYSICAL_WRITE_BYTES,0))/POWER(1024,3) AS PHYSICAL_WRITE_GB,
  SUM(NVL(USER_IO_WAIT_TIME/1E6,0)) AS USER_IO_WAIT_TIME,
  SUM(NVL(GROUP_BY_HASH_WORK_AREA_SIZE,0))/POWER(1024,3) AS GROUP_BY_WORK_AREA_SIZE_GB,
  SUM(NVL(GROUP_BY_HASH_EXPECTED_SIZE,0))/POWER(1024,3) AS GROUP_BY_EXPECTED_SIZE_GB,
  SUM(NVL(GROUP_BY_HASH_ACTUAL_MEM_USED,0))/POWER(1024,3) AS GROUP_BY_ACTUAL_MEM_USED_GB,
  SUM(NVL(GROUP_BY_HASH_MAX_MEM_USED,0))/POWER(1024,3) AS GROUP_BY_MAX_MEM_USED_GB,
  MAX(NVL(GROUP_BY_HASH_NUMBER_PASSES,0)) AS GROUP_BY_NUMBER_PASSES,
  SUM(NVL(GROUP_BY_HASH_TEMPSEG_SIZE,0))/POWER(1024,3) AS GROUP_BY_TEMPSEG_SIZE_GB,
  SUM(NVL(SORT_V2_WORK_AREA_SIZE,0))/POWER(1024,3) AS SORT_V2_WORK_AREA_SIZE_GB,
  SUM(NVL(SORT_V2_EXPECTED_SIZE,0))/POWER(1024,3) AS SORT_V2_EXPECTED_SIZE_GB,
  SUM(NVL(SORT_V2_ACTUAL_MEM_USED,0))/POWER(1024,3) AS SORT_V2_ACTUAL_MEM_USED_GB,
  SUM(NVL(SORT_V2_MAX_MEM_USED,0))/POWER(1024,3) AS SORT_V2_MAX_MEM_USED_GB,
  MAX(NVL(SORT_V2_NUMBER_PASSES,0)) AS SORT_V2_NUMBER_PASSES,
  SUM(NVL(SORT_V2_TEMPSEG_SIZE,0))/POWER(1024,3) AS SORT_V2_TEMPSEG_SIZE_GB,
  SUM(NVL(HASH_JOIN_WORK_AREA_SIZE,0))/POWER(1024,3) AS HASH_JOIN_WORK_AREA_SIZE_GB,
  SUM(NVL(HASH_JOIN_EXPECTED_SIZE,0))/POWER(1024,3) AS HASH_JOIN_EXPECTED_SIZE_GB,
  SUM(NVL(HASH_JOIN_ACTUAL_MEM_USED,0))/POWER(1024,3) AS HASH_JOIN_ACTUAL_MEM_USED_GB,
  SUM(NVL(HASH_JOIN_MAX_MEM_USED,0))/POWER(1024,3) AS HASH_JOIN_MAX_MEM_USED_GB,
  MAX(NVL(HASH_JOIN_NUMBER_PASSES,0)) AS HASH_JOIN_NUMBER_PASSES,
  SUM(NVL(HASH_JOIN_TEMPSEG_SIZE,0))/POWER(1024,3) AS HASH_JOIN_TEMPSEG_SIZE_GB,
  SUM(NVL(WINDOW_SORT_WORK_AREA_SIZE,0))/POWER(1024,3) AS WINDOW_SORT_WORK_AREA_SIZE_GB,
  SUM(NVL(WINDOW_SORT_EXPECTED_SIZE,0))/POWER(1024,3) AS WINDOW_SORT_EXPECTED_SIZE_GB,
  SUM(NVL(WINDOW_SORT_ACTUAL_MEM_USED,0))/POWER(1024,3) AS WINDOW_SORT_ACTUAL_MEM_USED_GB,
  SUM(NVL(WINDOW_SORT_MAX_MEM_USED,0))/POWER(1024,3) AS WINDOW_SORT_MAX_MEM_USED_GB,
  MAX(NVL(WINDOW_SORT_NUMBER_PASSES,0)) AS WINDOW_SORT_NUMBER_PASSES,
  SUM(NVL(WINDOW_SORT_TEMPSEG_SIZE,0))/POWER(1024,3) AS WINDOW_SORT_TEMPSEG_SIZE_GB,
  SUM(NVL(GROUP_BY_HASH_ACTUAL_MEM_USED,0))/POWER(1024,3) + SUM(NVL(SORT_V2_ACTUAL_MEM_USED,0))/POWER(1024,3) + SUM(NVL(HASH_JOIN_ACTUAL_MEM_USED,0))/POWER(1024,3) + SUM(NVL(WINDOW_SORT_ACTUAL_MEM_USED,0))/POWER(1024,3) AS PGA_SIZE_GB,
  ROUND(SUM(DB_TIME)/MAX(ELAPSED_TIME),2) AS PEI
FROM CAPSTONE_DEMO.RESOURCE_USAGE_MONITORING A
--WHERE A.SQL_ID = 'f1fnc2m8fwu5u'
GROUP BY
  EXPERIMENT_NUMBER,
  RUN_NUMBER,
  PGA_MAX_SIZE,
  DB_BIG_TABLE_CACHE_PERCENT,
  DB_CACHE_SIZE,
  PARALLEL_DEGREE_POLICY,
  PARALLEL_MIN_TIME_THRESHOLD,
  PGA_AGGREGATE_LIMIT,
  PGA_AGGREGATE_TARGET,
  SGA_MAX_SIZE,
  SGA_TARGET,
  SQL_ID,
  SNAPSHOT_TS,
  SQL_EXEC_START
ORDER BY
  SNAPSHOT_TS DESC;
),

FILLING_IN_THE_BLANKS AS

(
SELECT
  A.RUN_TIME_SEC,
  A.SQL_EXEC_START,
  A.SQL_ID,
  NVL(B.SNAPSHOT_TS, LEAD(B.SNAPSHOT_TS IGNORE NULLS)                 OVER(PARTITION BY A.SQL_EXEC_START ORDER BY A.RUN_TIME_SEC) - 1/24/60/60) AS SNAPSHOT_TS,
  NVL(B.PX_SERVER_COUNT, LEAD(B.PX_SERVER_COUNT IGNORE NULLS)         OVER(PARTITION BY A.SQL_EXEC_START ORDER BY A.RUN_TIME_SEC)) AS PX_SERVER_COUNT,
  NVL(B.DB_TIME, LEAD(B.DB_TIME IGNORE NULLS)                         OVER(PARTITION BY A.SQL_EXEC_START ORDER BY A.RUN_TIME_SEC)) AS DB_TIME,
  NVL(B.WALL_TIME, LEAD(B.WALL_TIME IGNORE NULLS)                     OVER(PARTITION BY A.SQL_EXEC_START ORDER BY A.RUN_TIME_SEC)) AS WALL_TIME,
  NVL(B.CPU_TIME, LEAD(B.CPU_TIME IGNORE NULLS)                       OVER(PARTITION BY A.SQL_EXEC_START ORDER BY A.RUN_TIME_SEC)) AS CPU_TIME,
  NVL(B.PGA_USED_GB, LEAD(B.PGA_USED_GB IGNORE NULLS)                 OVER(PARTITION BY A.SQL_EXEC_START ORDER BY A.RUN_TIME_SEC)) AS PGA_USED_GB,
  NVL(B.PGA_ALLOCATED_GB, LEAD(B.PGA_ALLOCATED_GB IGNORE NULLS)       OVER(PARTITION BY A.SQL_EXEC_START ORDER BY A.RUN_TIME_SEC)) AS PGA_ALLOCATED_GB,
  NVL(B.PGA_MAX_MEM_GB, LEAD(B.PGA_MAX_MEM_GB IGNORE NULLS)           OVER(PARTITION BY A.SQL_EXEC_START ORDER BY A.RUN_TIME_SEC)) AS PGA_MAX_MEM_GB,
  NVL(B.PGA_FREEABLE_MEM_GB, LEAD(B.PGA_FREEABLE_MEM_GB IGNORE NULLS) OVER(PARTITION BY A.SQL_EXEC_START ORDER BY A.RUN_TIME_SEC)) AS PGA_FREEABLE_MEM_GB,
  NVL(B.TEMP_SPACE_USED_GB, LEAD(B.TEMP_SPACE_USED_GB IGNORE NULLS)   OVER(PARTITION BY A.SQL_EXEC_START ORDER BY A.RUN_TIME_SEC)) AS TEMP_SPACE_USED_GB,
  NVL(B.PEI, LEAD(B.PEI IGNORE NULLS)                                 OVER(PARTITION BY A.SQL_EXEC_START ORDER BY A.RUN_TIME_SEC)) AS PEI
FROM ALL_RUNS_ALL_SECONDS A
  LEFT OUTER JOIN RESOURCE_USAGE_MOD B
    ON A.RUN_TIME_SEC = B.RUN_TIME_SEC
    AND A.SQL_EXEC_START = B.SQL_EXEC_START
)

SELECT
  *
FROM FILLING_IN_THE_BLANKS
WHERE SNAPSHOT_TS IS NOT NULL
ORDER BY
  SQL_EXEC_START,
  RUN_TIME_SEC;
);
  
  
CREATE OR REPLACE VIEW CAPSTONE_DEMO.RESOURCE_USAGE_SUMMARY_V AS
/
WITH ALL_TIME AS

(
SELECT
  ROWNUM AS RUN_TIME_SEC
FROM DUAL
CONNECT BY LEVEL <= 10000
)

RUN_SUMMARY AS

(
SELECT
  SNAPSHOT_TS,
  SQL_EXEC_START,
  ROUND(CAPSTONE_DEMO.INTERVAL_TO_SEC(SNAPSHOT_TS - SQL_EXEC_START),0) AS RUN_TIME_SEC,
  COUNT(*) - 1 AS PX_SERVER_COUNT, 
  MAX(SQL_ID) AS SQL_ID,
  SUM(DB_TIME/1E6) AS DB_TIME,
  MAX(ELAPSED_TIME/1E6) AS WALL_TIME,
  SUM(CPU_TIME/1E6) AS CPU_TIME,
  SUM(A.PGA_USED_MEM_BYTES)/POWER(1024, 3) AS PGA_USED_GB,
  SUM(A.PGA_ALLOC_MEM_BYTES)/POWER(1024, 3) AS PGA_ALLOCATED_GB,
  SUM(A.PGA_MAX_MEM_BYTES)/POWER(1024, 3) AS PGA_MAX_MEM_GB,
  SUM(A.PGA_FREEABLE_MEM_BYTES)/POWER(1024, 3) AS PGA_FREEABLE_MEM_GB,
  SUM(TEMP_BLOCKS * TEMP_BLOCK_SIZE_BYTES)/POWER(1024, 3) AS TEMP_SPACE_USED_GB,
  ROUND(SUM(DB_TIME/1E6)/MAX(ELAPSED_TIME/1E6),2) AS PEI
FROM CAPSTONE_DEMO.RESOURCE_USAGE_MONITORING A
GROUP BY
  SNAPSHOT_TS,
  SQL_EXEC_START
),

FINDING_REDUNDANT_DATA AS

(
SELECT
  DENSE_RANK() OVER(PARTITION BY SQL_ID ORDER BY SQL_EXEC_START) AS SQL_ID_RUN_NUMBER,
  LAG(WALL_TIME) OVER(PARTITION BY SQL_ID, SQL_EXEC_START ORDER BY SNAPSHOT_TS) AS PREVIOUS_WALL_TIME,
  A.*
FROM RUN_SUMMARY A
  RIGHT OUTER JOIN ALL_TIME B
    ON A.RUN_TIME_SEC = B.RUN_TIME_SEC
)

SELECT
  SQL_ID_RUN_NUMBER,
  SNAPSHOT_TS,
  SQL_EXEC_START,
  RUN_TIME_SEC,
  PX_SERVER_COUNT, 
  SQL_ID,
  DB_TIME,
  WALL_TIME,
  CPU_TIME,
  PGA_USED_GB,
  PGA_ALLOCATED_GB,
  PGA_MAX_MEM_GB,
  PGA_FREEABLE_MEM_GB,
  TEMP_SPACE_USED_GB,
  PEI
FROM FINDING_REDUNDANT_DATA
WHERE WALL_TIME <> PREVIOUS_WALL_TIME
OR PREVIOUS_WALL_TIME IS NULL
ORDER BY
  SQL_EXEC_START DESC,
  SNAPSHOT_TS DESC;
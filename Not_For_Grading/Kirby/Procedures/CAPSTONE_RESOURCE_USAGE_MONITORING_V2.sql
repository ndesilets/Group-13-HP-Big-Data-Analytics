PROCEDURE RESOURCE_USAGE_MONITORING_V2(TIME_BETWEEN_LOOPS NUMBER) AS

STATUS VARCHAR2(5):='TRUE';
A NUMBER:= 0;

BEGIN

WHILE STATUS = 'TRUE' LOOP
A:=A+1;

INSERT INTO CAPSTONE_DEMO.SQL_MONITOR_HISTORY 

WITH MONITOR_ME AS

(
SELECT 
  MAX(SQL_EXEC_START) AS SQL_EXEC_START
FROM V$SQL_MONITOR
WHERE ACTION = 'RESOURCE_MONITORING'
)

SELECT
  SYSTIMESTAMP AS SNAPSHOT_TS,
  A AS SNAPSHOT_ID,
  A.KEY,
  A.REPORT_ID,
  A.STATUS,
  A.USER#,
  A.USERNAME,
  A.MODULE,
  A.ACTION,
  A.SERVICE_NAME,
  A.CLIENT_IDENTIFIER,
  A.CLIENT_INFO,
  A.PROGRAM,
  A.PLSQL_ENTRY_OBJECT_ID,
  A.PLSQL_ENTRY_SUBPROGRAM_ID,
  A.PLSQL_OBJECT_ID,
  A.PLSQL_SUBPROGRAM_ID,
  A.FIRST_REFRESH_TIME,
  A.LAST_REFRESH_TIME,
  A.REFRESH_COUNT,
  A.DBOP_EXEC_ID,
  A.DBOP_NAME,
  A.SID,
  A.PROCESS_NAME,
  A.SQL_ID,
  A.SQL_TEXT,
  A.IS_FULL_SQLTEXT,
  A.SQL_EXEC_START,
  A.SQL_EXEC_ID,
  A.SQL_PLAN_HASH_VALUE,
  A.SQL_FULL_PLAN_HASH_VALUE,
  A.EXACT_MATCHING_SIGNATURE,
  A.FORCE_MATCHING_SIGNATURE,
  A.SQL_CHILD_ADDRESS,
  A.SESSION_SERIAL#,
  A.PX_IS_CROSS_INSTANCE,
  A.PX_MAXDOP,
  A.PX_MAXDOP_INSTANCES,
  A.PX_SERVERS_REQUESTED,
  A.PX_SERVERS_ALLOCATED,
  A.PX_SERVER#,
  A.PX_SERVER_GROUP,
  A.PX_SERVER_SET,
  A.PX_QCINST_ID,
  A.PX_QCSID,
  A.ERROR_NUMBER,
  A.ERROR_FACILITY,
  A.ERROR_MESSAGE,
  A.BINDS_XML,
  A.OTHER_XML,
  A.ELAPSED_TIME,
  A.QUEUING_TIME,
  A.CPU_TIME,
  A.FETCHES,
  A.BUFFER_GETS,
  A.DISK_READS,
  A.DIRECT_WRITES,
  A.IO_INTERCONNECT_BYTES,
  A.PHYSICAL_READ_REQUESTS,
  A.PHYSICAL_READ_BYTES,
  A.PHYSICAL_WRITE_REQUESTS,
  A.PHYSICAL_WRITE_BYTES,
  A.APPLICATION_WAIT_TIME,
  A.CONCURRENCY_WAIT_TIME,
  A.CLUSTER_WAIT_TIME,
  A.USER_IO_WAIT_TIME,
  A.PLSQL_EXEC_TIME,
  A.JAVA_EXEC_TIME,
  A.RM_LAST_ACTION,
  A.RM_LAST_ACTION_REASON,
  A.RM_LAST_ACTION_TIME,
  A.RM_CONSUMER_GROUP,
  A.CON_ID,
  A.CON_NAME,
  A.ECID,
  A.IS_ADAPTIVE_PLAN,
  A.IS_FINAL_PLAN
FROM V$SQL_MONITOR A
  INNER JOIN MONITOR_ME B
    ON A. SQL_EXEC_START = B.SQL_EXEC_START;
    
INSERT INTO CAPSTONE_DEMO.SQL_PLAN_MONITOR_HISTORY


WITH MONITOR_ME AS

(
SELECT 
  MAX(SQL_EXEC_START) AS SQL_EXEC_START
FROM V$SQL_MONITOR
WHERE ACTION = 'RESOURCE_MONITORING'
)

SELECT
SYSTIMESTAMP AS SNAPSHOT_TS,
A AS SNAPSHOT_ID,
A.CON_ID,
A.KEY,
A.STATUS,
A.FIRST_REFRESH_TIME,
A.LAST_REFRESH_TIME,
A.FIRST_CHANGE_TIME,
A.LAST_CHANGE_TIME,
A.REFRESH_COUNT,
A.SID,
A.PROCESS_NAME,
A.SQL_ID,
A.SQL_EXEC_START,
A.SQL_EXEC_ID,
A.SQL_PLAN_HASH_VALUE,
A.SQL_CHILD_ADDRESS,
A.PLAN_PARENT_ID,
A.PLAN_LINE_ID,
A.PLAN_OPERATION,
A.PLAN_OPTIONS,
A.PLAN_OBJECT_OWNER,
A.PLAN_OBJECT_NAME,
A.PLAN_OBJECT_TYPE,
A.PLAN_DEPTH,
A.PLAN_POSITION,
A.PLAN_COST,
A.PLAN_CARDINALITY,
A.PLAN_BYTES,
A.PLAN_TIME,
A.PLAN_PARTITION_START,
A.PLAN_PARTITION_STOP,
A.PLAN_CPU_COST,
A.PLAN_IO_COST,
A.PLAN_TEMP_SPACE,
A.STARTS,
A.OUTPUT_ROWS,
A.IO_INTERCONNECT_BYTES,
A.PHYSICAL_READ_REQUESTS,
A.PHYSICAL_READ_BYTES,
A.PHYSICAL_WRITE_REQUESTS,
A.PHYSICAL_WRITE_BYTES,
A.WORKAREA_MEM,
A.WORKAREA_MAX_MEM,
A.WORKAREA_TEMPSEG,
A.WORKAREA_MAX_TEMPSEG,
A.OTHERSTAT_GROUP_ID,
A.OTHERSTAT_1_ID,
A.OTHERSTAT_1_TYPE,
A.OTHERSTAT_1_VALUE,
A.OTHERSTAT_2_ID,
A.OTHERSTAT_2_TYPE,
A.OTHERSTAT_2_VALUE,
A.OTHERSTAT_3_ID,
A.OTHERSTAT_3_TYPE,
A.OTHERSTAT_3_VALUE,
A.OTHERSTAT_4_ID,
A.OTHERSTAT_4_TYPE,
A.OTHERSTAT_4_VALUE,
A.OTHERSTAT_5_ID,
A.OTHERSTAT_5_TYPE,
A.OTHERSTAT_5_VALUE,
A.OTHERSTAT_6_ID,
A.OTHERSTAT_6_TYPE,
A.OTHERSTAT_6_VALUE,
A.OTHERSTAT_7_ID,
A.OTHERSTAT_7_TYPE,
A.OTHERSTAT_7_VALUE,
A.OTHERSTAT_8_ID,
A.OTHERSTAT_8_TYPE,
A.OTHERSTAT_8_VALUE,
A.OTHERSTAT_9_ID,
A.OTHERSTAT_9_TYPE,
A.OTHERSTAT_9_VALUE,
A.OTHERSTAT_10_ID,
A.OTHERSTAT_10_TYPE,
A.OTHERSTAT_10_VALUE,
A.OTHER_XML,
A.PLAN_OPERATION_INACTIVE
FROM V$SQL_PLAN_MONITOR A
  INNER JOIN MONITOR_ME B
    ON A.SQL_EXEC_START = B.SQL_EXEC_START;

INSERT INTO CAPSTONE_DEMO.SQL_WORKAREA_ACTIVE_HISTORY

SELECT
  B.MODULE,
  B.ACTION,
  B.CLIENT_INFO,
  A AS SNAPSHOT_ID,
  SYSTIMESTAMP AS SNAPSHOT_TS,
  B.SQL_EXEC_START,
  B.SQL_ID,
  B.SID,
  A.OPERATION_TYPE,
  A.OPERATION_ID,
  A.WORK_AREA_SIZE,
  A.EXPECTED_SIZE,
  A.ACTUAL_MEM_USED,
  A.MAX_MEM_USED,
  A.NUMBER_PASSES,
  A.TEMPSEG_SIZE
FROM V$SQL_WORKAREA_ACTIVE A
  INNER JOIN V$SESSION B
    ON A.SID = B.SID
WHERE B.ACTION = 'RESOURCE_MONITORING';

INSERT INTO CAPSTONE_DEMO.SESSION_PROCESS_HISTORY

SELECT
  A.MODULE,
  A.ACTION,
  A.CLIENT_INFO,
  A AS SNAPSHOT_ID,
  SYSTIMESTAMP AS SNAPSHOT_TS,
  A.SQL_EXEC_START,
  A.SQL_ID,
  A.SID,
  A.SADDR,
  B.PGA_USED_MEM,
  B.PGA_ALLOC_MEM,
  B.PGA_FREEABLE_MEM,
  B.PGA_MAX_MEM
FROM V$SESSION A
  INNER JOIN V$PROCESS B
    ON A.PADDR = B.ADDR
WHERE A.ACTION = 'RESOURCE_MONITORING';

INSERT INTO CAPSTONE_DEMO.SESS_TIME_MODEL_PX_SESS_HIST

SELECT
  C.MODULE,
  C.ACTION,
  C.CLIENT_INFO,
  A AS SNAPSHOT_ID,
  SYSTIMESTAMP AS SNAPSHOT_TS,
  C.SQL_EXEC_START,
  C.SQL_ID,
  C.SID,
  A.STAT_NAME,
  A.VALUE,
  B.QCSID
FROM V$SESS_TIME_MODEL A
  INNER JOIN V$PX_SESSION B
    ON A.SID = B.SID
  INNER JOIN V$SESSION C
    ON A.SID = C.SID
WHERE C.ACTION = 'RESOURCE_MONITORING'
AND VALUE > 0;

INSERT INTO CAPSTONE_DEMO.SGASTAT_HISTORY

SELECT
  SYSTIMESTAMP AS SNAPSHOT_TS,
  A AS SNAPSHOT_ID,
  A.POOL,
  A.NAME,
  A.BYTES,
  A.CON_ID
FROM V$SGASTAT A;

INSERT INTO CAPSTONE_DEMO.SGA_RESIZE_OPS_HISTORY

SELECT
  SYSTIMESTAMP AS SNAPSHOT_TS,
  A AS SNAPSHOT_TS,
  A.COMPONENT,
  A.OPER_TYPE,
  A.OPER_MODE,
  A.PARAMETER,
  A.INITIAL_SIZE,
  A.TARGET_SIZE,
  A.FINAL_SIZE,
  A.STATUS,
  A.START_TIME,
  A.END_TIME,
  A.CON_ID
FROM V$SGA_RESIZE_OPS A;

INSERT INTO CAPSTONE_DEMO.SGA_DYNAMIC_COMPONENTS_HISTORY

SELECT
  SYSTIMESTAMP AS SNAPSHOT_TS,
  A AS SNAPSHOT_TS,
  A.COMPONENT,
  A.CURRENT_SIZE,
  A.MIN_SIZE,
  A.MAX_SIZE,
  A.USER_SPECIFIED_SIZE,
  A.OPER_COUNT,
  A.LAST_OPER_TYPE,
  A.LAST_OPER_MODE,
  A.LAST_OPER_TIME,
  A.GRANULE_SIZE,
  A.CON_ID
FROM V$SGA_DYNAMIC_COMPONENTS A;

INSERT INTO CAPSTONE_DEMO.SGA_DYNAMIC_FREE_MEM_HISTORY

SELECT
  SYSTIMESTAMP AS SNAPSHOT_TS,
  A AS SNAPSHOT_TS,
  A.CURRENT_SIZE,
  A.CON_ID
FROM V$SGA_DYNAMIC_FREE_MEMORY A;

INSERT INTO CAPSTONE_DEMO.BTS_STAT_HISTORY

SELECT
  SYSTIMESTAMP AS SNAPSHOT_TS,
  A AS SNAPSHOT_TS,
  A.TSN,
  A.TSV,
  A.MAXSIZE,
  A.CURSIZE,
  A.USED,
  A.UTIME,
  A.DALLOC,
  A.DFREE,
  A.NALLOC,
  A.NFREE,
  A.DTIME,
  A.TALLOC,
  A.TFREE,
  A.TTIME,
  A.FLAG,
  A.CON_ID
FROM V$BTS_STAT A;

INSERT INTO CAPSTONE_DEMO.BT_SCAN_CACHE_HISTORY

SELECT
  SYSTIMESTAMP AS SNAPSHOT_TS,
  A AS SNAPSHOT_TS,
  A.BT_CACHE_ALLOC,
  A.BT_CACHE_TARGET,
  A.OBJECT_COUNT,
  A.MEMORY_BUF_ALLOC,
  A.MIN_CACHED_TEMP,
  A.CON_ID
FROM V$BT_SCAN_CACHE A;

INSERT INTO CAPSTONE_DEMO.BT_SCAN_OBJ_TEMPS_HISTORY

SELECT
  SYSTIMESTAMP AS SNAPSHOT_TS,
  A AS SNAPSHOT_ID,
  A.TS#,
  A.DATAOBJ#,
  A.SIZE_IN_BLKS,
  A.TEMPERATURE,
  A.POLICY,
  A.CACHED_IN_MEM,
  A.CON_ID
FROM V$BT_SCAN_OBJ_TEMPS A;

INSERT INTO CAPSTONE_DEMO.IM_USER_SEGMENTS_HISTORY

SELECT
SYSTIMESTAMP AS SNAPSHOT_TS,
A AS SNAPSHOT_ID,
A.SEGMENT_NAME,
A.PARTITION_NAME,
A.SEGMENT_TYPE,
A.TABLESPACE_NAME,
A.INMEMORY_SIZE,
A.BYTES,
A.BYTES_NOT_POPULATED,
A.POPULATE_STATUS,
A.INMEMORY_PRIORITY,
A.INMEMORY_DISTRIBUTE,
A.INMEMORY_DUPLICATE,
A.INMEMORY_COMPRESSION,
A.CON_ID
FROM V$IM_USER_SEGMENTS A;

INSERT INTO CAPSTONE_DEMO.IM_SEGMENTS_HISTORY

SELECT
SYSTIMESTAMP AS SNAPSHOT_TS,
A AS SNAPSHOT_ID,
A.OWNER,
A.SEGMENT_NAME,
A.PARTITION_NAME,
A.SEGMENT_TYPE,
A.TABLESPACE_NAME,
A.INMEMORY_SIZE,
A.BYTES,
A.BYTES_NOT_POPULATED,
A.POPULATE_STATUS,
A.INMEMORY_PRIORITY,
A.INMEMORY_DISTRIBUTE,
A.INMEMORY_DUPLICATE,
A.INMEMORY_COMPRESSION,
A.CON_ID
FROM V$IM_SEGMENTS A;

COMMIT;

DBMS_LOCK.SLEEP(SECONDS => TIME_BETWEEN_LOOPS);
SELECT STATUS INTO STATUS FROM CAPSTONE_DEMO.RESOURCE_MONITOR_STATUS;

END LOOP;

END RESOURCE_USAGE_MONITORING_V2;